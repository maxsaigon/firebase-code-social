// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// Account model for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model for NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// User model (extends NextAuth User)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials provider
  
  // Custom fields
  fullName      String?   @map("full_name")
  avatarUrl     String?   @map("avatar_url")
  isAdmin       Boolean   @default(false) @map("is_admin")
  status        UserStatus @default(ACTIVE)
  balance       Decimal   @default(0.00) @db.Decimal(15, 2) // User account balance
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts           Account[]
  sessions           Session[]
  wallet             Wallet?
  orders             Order[]
  transactions       Transaction[]
  paymentMethods     PaymentMethod[]
  paymentTransactions PaymentTransaction[]
  cryptoAddresses    CryptoAddress[]

  @@map("users")
}

// VerificationToken model for NextAuth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Wallet model
model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  balance   Decimal  @default(0.00) @db.Decimal(15, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

// Service model
model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true) @map("is_active")
  category    String   @default("general")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  orders Order[]

  @@map("services")
}

// Order model
model Order {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  serviceId   String      @map("service_id")
  quantity    Int
  unitPrice   Decimal     @map("unit_price") @db.Decimal(10, 2)
  totalAmount Decimal     @map("total_amount") @db.Decimal(15, 2)
  status      OrderStatus @default(PENDING)
  notes       String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  service      Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("orders")
}

// Transaction model
model Transaction {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  orderId     String?           @map("order_id")
  amount      Decimal           @db.Decimal(15, 2)
  type        TransactionType
  status      TransactionStatus @default(COMPLETED)
  description String?
  referenceId String?           @map("reference_id")
  createdAt   DateTime          @default(now()) @map("created_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED

  @@map("user_status")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED

  @@map("order_status")
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PAYMENT
  REFUND
  COMMISSION

  @@map("transaction_type")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED

  @@map("transaction_status")
}

// Payment Settings model for admin configuration
model PaymentSetting {
  id        String   @id @default(cuid())
  provider  String   @unique // 'stripe', 'bitcoin', 'ethereum', etc.
  config    Json     // Store API keys, wallet addresses, etc.
  isActive  Boolean  @default(false) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("payment_settings")
}

// Payment Methods model for user payment methods
model PaymentMethod {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String   // 'stripe_card', 'bitcoin', 'ethereum', etc.
  details   Json     // Store payment method details
  isDefault Boolean  @default(false) @map("is_default")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

// Payment Transactions model for tracking all payments
model PaymentTransaction {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  amount                Decimal  @db.Decimal(10, 2)
  currency              String   @default("USD")
  provider              String
  providerTransactionId String?  @map("provider_transaction_id")
  status                String   @default("pending") // 'pending', 'completed', 'failed', 'cancelled', 'verifying', 'expired'
  type                  String   // 'deposit', 'withdrawal'
  expiresAt             DateTime? @map("expires_at") // Payment expiration time
  processedAt           DateTime? @map("processed_at") // When payment was processed
  metadata              Json?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

// Crypto Addresses model for managing crypto payments
model CryptoAddress {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  currency  String   // 'BTC', 'ETH', 'USDT', etc.
  address   String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, currency])
  @@map("crypto_addresses")
}
